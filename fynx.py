import asyncio
import logging
from aiogram import Bot, Dispatcher, F
from aiogram.types import (
    Message,
    CallbackQuery,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

# ==========================
# üîë –ù–∞—Å—Ç—Ä–æ–π–∫–∏
# ==========================
API_TOKEN = "8376508422:AAEYUiLyvBtXCfJBril_VpHku6BA77_3BJU"
ADMIN_ID = 1347186841
GROUP_ID = -1003055132178

# ==========================
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# ==========================
logging.basicConfig(level=logging.INFO)

# ==========================
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
# ==========================
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞—è–≤–æ–∫
clients_data = {}

# ==========================
# FSM
# ==========================
class OrderForm(StatesGroup):
    choosing_service = State()
    choosing_subservice = State()
    describing_product = State()
    leaving_contact = State()
    typing_contact = State()  # –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞

# ==========================
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
# ==========================
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üåê –°–æ–∑–¥–∞–Ω–∏–µ —Å–∞–π—Ç–æ–≤")],
        [KeyboardButton(text="ü§ñ –°–æ–∑–¥–∞–Ω–∏–µ Telegram-–±–æ—Ç–æ–≤")],
        [KeyboardButton(text="üõ° –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ")],
    ],
    resize_keyboard=True
)

sites_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üåê –°–∞–π—Ç-–≤–∏–∑–∏—Ç–∫–∞")],
        [KeyboardButton(text="üõí –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω")],
        [KeyboardButton(text="üè¢ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Å–∞–π—Ç")],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")],
    ],
    resize_keyboard=True
)

bots_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="ü§ñ –ß–∞—Ç-–±–æ—Ç –¥–ª—è –±–∏–∑–Ω–µ—Å–∞")],
        [KeyboardButton(text="üì¢ –ë–æ—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")],
        [KeyboardButton(text="üí¨ –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫")],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")],
    ],
    resize_keyboard=True
)

support_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üîí –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–∞–π—Ç–æ–≤")],
        [KeyboardButton(text="ü§ñ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –±–æ—Ç–æ–≤")],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")],
    ],
    resize_keyboard=True
)

back_only = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
    ],
    resize_keyboard=True
)

contact_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìû –û—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä/–Ω–∏–∫")],
        [KeyboardButton(text="üë§ –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º")],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
    ],
    resize_keyboard=True
)

# ==========================
# –•–µ–Ω–¥–ª–µ—Ä—ã
# ==========================
@dp.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    await state.set_state(OrderForm.choosing_service)
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–ø–∞–Ω–∏—é *Fynx*!\n\n"
        "–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —É—Å–ª—É–≥–∏:\n"
        "üåê –°–æ–∑–¥–∞–Ω–∏–µ —Å–∞–π—Ç–æ–≤\n"
        "ü§ñ –°–æ–∑–¥–∞–Ω–∏–µ Telegram-–±–æ—Ç–æ–≤\n"
        "üõ° –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é —É—Å–ª—É–≥—É –Ω–∏–∂–µ üëá\n\n"
        "–î–ª—è –ø—Ä—è–º–æ–π —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–æ–º: @Nonam1n",
        reply_markup=main_menu,
        parse_mode="Markdown"
    )

# ---------- –í—ã–±–æ—Ä —É—Å–ª—É–≥–∏ ----------
@dp.message(OrderForm.choosing_service)
async def choose_service(message: Message, state: FSMContext):
    text = message.text
    if text == "üåê –°–æ–∑–¥–∞–Ω–∏–µ —Å–∞–π—Ç–æ–≤":
        await state.update_data(service="–°–æ–∑–¥–∞–Ω–∏–µ —Å–∞–π—Ç–æ–≤")
        await state.set_state(OrderForm.choosing_subservice)
        await message.answer("–ú—ã —Å–æ–∑–¥–∞—ë–º —Ä–∞–∑–Ω—ã–µ –≤–∏–¥—ã —Å–∞–π—Ç–æ–≤. –ö–∞–∫–æ–π –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=sites_menu)
    elif text == "ü§ñ –°–æ–∑–¥–∞–Ω–∏–µ Telegram-–±–æ—Ç–æ–≤":
        await state.update_data(service="–°–æ–∑–¥–∞–Ω–∏–µ Telegram-–±–æ—Ç–æ–≤")
        await state.set_state(OrderForm.choosing_subservice)
        await message.answer("–ú—ã —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∏–¥—ã –±–æ—Ç–æ–≤. –ö–∞–∫–æ–π –Ω—É–∂–µ–Ω –≤–∞–º?", reply_markup=bots_menu)
    elif text == "üõ° –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ":
        await state.update_data(service="–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ")
        await state.set_state(OrderForm.choosing_subservice)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏:", reply_markup=support_menu)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ üëá", reply_markup=main_menu)

# ---------- –ü–æ–¥—É—Å–ª—É–≥–∞ ----------
@dp.message(OrderForm.choosing_subservice)
async def choose_subservice(message: Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.set_state(OrderForm.choosing_service)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=main_menu)
        return
    await state.update_data(subservice=message.text)
    await state.set_state(OrderForm.describing_product)
    await message.answer("–û–ø–∏—à–∏—Ç–µ –≤–∞—à –ø—Ä–æ–¥—É–∫—Ç –∏–ª–∏ –∑–∞–¥–∞—á—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ ‚úçÔ∏è", reply_markup=back_only)

# ---------- –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ ----------
@dp.message(OrderForm.describing_product)
async def describe_product(message: Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.set_state(OrderForm.choosing_subservice)
        data = await state.get_data()
        service = data.get("service")
        if service == "–°–æ–∑–¥–∞–Ω–∏–µ —Å–∞–π—Ç–æ–≤":
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Å–∞–π—Ç–∞:", reply_markup=sites_menu)
        elif service == "–°–æ–∑–¥–∞–Ω–∏–µ Telegram-–±–æ—Ç–æ–≤":
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –±–æ—Ç–∞:", reply_markup=bots_menu)
        else:
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:", reply_markup=support_menu)
        return
    await state.update_data(description=message.text)
    await state.set_state(OrderForm.leaving_contact)
    await message.answer(
        "–ö–∞–∫ –Ω–∞–º —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è?\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä, –Ω–∏–∫ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏.",
        reply_markup=contact_menu
    )

# ---------- –ö–æ–Ω—Ç–∞–∫—Ç—ã ----------
@dp.message(OrderForm.leaving_contact)
async def leaving_contact_handler(message: Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.set_state(OrderForm.describing_product)
        await message.answer("–û–ø–∏—à–∏—Ç–µ –≤–∞—à –ø—Ä–æ–¥—É–∫—Ç –ø–æ–¥—Ä–æ–±–Ω–µ–µ ‚úçÔ∏è", reply_markup=back_only)
        return
    if message.text == "üë§ –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º":
        await message.answer("–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é: @Nonam1n")
        return
    if message.text == "üìû –û—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä/–Ω–∏–∫":
        await state.set_state(OrderForm.typing_contact)
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä –∏–ª–∏ –Ω–∏–∫:")
        return

# ---------- –í–≤–æ–¥ –∫–æ–Ω—Ç–∞–∫—Ç–∞ ----------
@dp.message(OrderForm.typing_contact)
async def receive_contact(message: Message, state: FSMContext):
    contact = message.text.strip()
    username = f"@{message.from_user.username}" if message.from_user.username else "–ë–µ–∑ –Ω–∏–∫–∞"
    await state.update_data(contact=contact, username=username)
    data = await state.get_data()

    text = (
        f"üì© –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!\n\n"
        f"üõ† –£—Å–ª—É–≥–∞: {data.get('service')}\n"
        f"üìå –ü–æ–¥—É—Å–ª—É–≥–∞: {data.get('subservice')}\n"
        f"‚úçÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ: {data.get('description')}\n"
        f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {data.get('contact')}\n"
    )

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve:{message.from_user.id}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject:{message.from_user.id}")
            ]
        ]
    )
    clients_data[message.from_user.id] = data
    await bot.send_message(ADMIN_ID, text, reply_markup=kb)
    await message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É ‚úÖ")

# ---------- –û–¥–æ–±—Ä–µ–Ω–∏–µ/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ ----------
@dp.callback_query(F.data.startswith("approve:"))
async def approve_client(callback: CallbackQuery):
    user_id = int(callback.data.split(":")[1])
    data = clients_data.get(user_id)
    if not data:
        await callback.answer("–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", show_alert=True)
        return
    text = (
        f"‚úÖ –û–¥–æ–±—Ä–µ–Ω –∫–ª–∏–µ–Ω—Ç:\n\n"
        f"üõ† –£—Å–ª—É–≥–∞: {data.get('service')}\n"
        f"üìå –ü–æ–¥—É—Å–ª—É–≥–∞: {data.get('subservice')}\n"
        f"‚úçÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ: {data.get('description')}\n"
        f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {data.get('contact')}"
    )
    await bot.send_message(GROUP_ID, text)
    await callback.answer("–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –≥—Ä—É–ø–ø—É!")
    await callback.message.edit_text("–ó–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞.")

@dp.callback_query(F.data.startswith("reject:"))
async def reject_client(callback: CallbackQuery):
    await callback.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
    await callback.message.edit_text("–ó–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")

# ==========================
# –ó–∞–ø—É—Å–∫
# ==========================
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
